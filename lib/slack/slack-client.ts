// lib/slack/slack-client.ts

import { WebClient } from '@slack/web-api';
import logger from '../logger';

export interface SlackDigestData {
  title: string;
  summary: string;
  tweets: any[];
  articles: any[];
  metadata: {
    digest_id: string;
    ai_model: string;
    token_usage: any;
  };
}

export class SlackClient {
  private client: WebClient;
  private defaultChannel: string;

  constructor() {
    this.client = new WebClient(process.env.SLACK_BOT_TOKEN);
    this.defaultChannel = process.env.SLACK_CHANNEL_ID || '#general';
  }

  /**
   * Post digest to Slack channel
   */
  async postDigest(digestData: SlackDigestData, channelId?: string): Promise<void> {
    try {
      const channel = channelId || this.defaultChannel;
      const blocks = this.buildDigestBlocks(digestData);

      const result = await this.client.chat.postMessage({
        channel: channel,
        text: `New Digest: ${digestData.title}`,
        blocks: blocks
      });

      logger.info('Digest posted to Slack', {
        digest_id: digestData.metadata.digest_id,
        channel: channel,
        message_ts: result.ts
      });

    } catch (error) {
      logger.error('Failed to post digest to Slack', error);
      throw error;
    }
  }

  /**
   * Send simple message to Slack
   */
  async sendMessage(text: string, channelId?: string): Promise<void> {
    try {
      const channel = channelId || this.defaultChannel;

      await this.client.chat.postMessage({
        channel: channel,
        text: text
      });

      logger.info('Message sent to Slack', { channel, text: text.substring(0, 50) });

    } catch (error) {
      logger.error('Failed to send message to Slack', error);
      throw error;
    }
  }

  /**
   * Build Slack blocks for digest
   */
  private buildDigestBlocks(digestData: SlackDigestData): any[] {
    const blocks: any[] = [
      {
        type: 'header',
        text: {
          type: 'plain_text',
          text: digestData.title
        }
      },
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: `*Summary:*\n${digestData.summary}`
        }
      },
      {
        type: 'divider'
      }
    ];

    // Add tweet highlights if available
    if (digestData.tweets && digestData.tweets.length > 0) {
      blocks.push({
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: '*🐦 Tweet Highlights:*'
        }
      });

      digestData.tweets.slice(0, 3).forEach(tweet => {
        blocks.push({
          type: 'section',
          text: {
            type: 'mrkdwn',
            text: `• ${tweet.text.substring(0, 100)}... - @${tweet.author}`
          }
        });
      });

      blocks.push({ type: 'divider' });
    }

    // Add article highlights if available
    if (digestData.articles && digestData.articles.length > 0) {
      blocks.push({
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: '*📰 Article Highlights:*'
        }
      });

      digestData.articles.slice(0, 3).forEach(article => {
        blocks.push({
          type: 'section',
          text: {
            type: 'mrkdwn',
            text: `• <${article.url}|${article.title}>\n  ${article.description?.substring(0, 100)}...`
          }
        });
      });

      blocks.push({ type: 'divider' });
    }

    // Add metadata
    blocks.push({
      type: 'context',
      elements: [
        {
          type: 'mrkdwn',
          text: `🤖 Generated by ${digestData.metadata.ai_model} • Digest ID: ${digestData.metadata.digest_id}`
        }
      ]
    });

    return blocks;
  }

  /**
   * Test Slack connection
   */
  async testConnection(): Promise<boolean> {
    try {
      const result = await this.client.auth.test();
      logger.info('Slack connection test successful', { team: result.team, user: result.user });
      return true;
    } catch (error) {
      logger.error('Slack connection test failed', error);
      return false;
    }
  }
}